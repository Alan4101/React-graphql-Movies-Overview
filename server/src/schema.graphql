#scalar type
scalar DateTime

type Movies {
  page: Int!
  totalResults: Int!
  totalPages: Int!
  results: [Movie!]!
}
type Movie {
  id: ID!
  title: String!
  releaseDate: String!
  poster: String!
  genreIds: [Int!]!
  adult: Boolean
  overview: String
  originalLanguage: String
  backdropPath: String
  voteCount: Int
  video: Boolean
  voteAverage: Float
}
type Genre {
  id: ID!
  name: String!
}
type MovieSelected {
  _id: ID!
  title: String!
  releaseDate: String!
  poster: String!
  genres: [String!]!
  adult: Boolean
  movieId: String!
  overview: String
  voteCount: Int
  voteAverage: Float
  userDescription: String
  backdropPath: String
  sequenceNumber: Int
}
input MovieSelectedInput {
  _id: ID!
  title: String!
  releaseDate: String!
  poster: String!
  genres: [String]!
  adult: Boolean
  movieId: String!
  overview: String
  voteCount: Int
  voteAverage: Float
  userDescription: String
  backdropPath: String
  sequenceNumber: Int
}
input MovieCreatedInput {
  title: String
  poster: String
  genres: [String]
  adult: Boolean
  releaseDate: String
  movieId: String
  overview: String
  voteCount: Int
  userDescription: String
  backdropPath: String
  voteAverage: Float
}
type RecomendedMovies {
  _id: ID!
  title: String!
  description: String!
  createdData: String!
  movies: [MovieSelected!]!
}
input RecomendedUpdateInput {
  _id: ID!
  title: String
  description: String
  createdData: String
  movies: [MovieSelectedInput]
}
interface CastAndCrew {
  id: ID!
  creditId: ID!
  adult: Boolean!
  gender: Int
  knownForDepartment: String
  name: String!
  originalName: String!
  popularit: Float
  profilePath: String!
}
type Crew implements CastAndCrew {
  id: ID!
  creditId: ID!
  adult: Boolean!
  gender: Int
  knownForDepartment: String
  name: String!
  originalName: String!
  popularit: Float
  profilePath: String!
  department: String!
  job: String!
}
type Cast implements CastAndCrew {
  id: ID!
  creditId: ID!
  adult: Boolean!
  gender: Int
  knownForDepartment: String
  name: String!
  originalName: String!
  popularit: Float
  profilePath: String!
  castId: ID!
  character: String
  order: Int
}
type Credits {
  id: ID!
  cast: [Cast!]!
  crew: [Crew!]!
}

type DeleteResponse {
  success: Boolean!
  message: String
}
#Users types
type User {
  _id: ID!
  firstName: String!
  lastName: String!
  age: Int!
  email: String!
  password: String!
  role: String!
  verified: Boolean!
  picture: String!
  createdAt: DateTime
  updatedAt: DateTime
}
type UserResponse {
  status: String!
  user: User!
}
input SingUpInput {
  firstName: String!
  lastName: String!
  age: Int!
  email: String!
  password: String!
  picture: String!
}

input LoginInput {
  email: String!
  password: String!
}
type TokenResponse {
  status: String!
  access_token: String!
}
type TokenResponse {
  status: String!
  access_token: String!
}
#end Users type

#--------Queries---------
type Query {
  movies(page: Int, language: String): Movies!
  movieById(_id: ID!): MovieSelected!
  genres: [Genre!]!
  getSelectedMovies: [MovieSelected!]!
  getRecommended: [RecomendedMovies!]!

  credits(movieId: ID, language: String): Credits!
  users: [User!]!

  #Auth
  refreshAccessToken: TokenResponse!
  logoutUser: Boolean!
  # User
  # getMe: UserResponse!
}
# ----- Mutations-------
type Mutation {
  #Auth
  loginUser(input: LoginInput!): TokenResponse!
  signUpUser(input: SingUpInput!): UserResponse!

  registration(params: SingUpInput!): User!
  # Create new selected movie
  createMovie(movie: MovieCreatedInput!): MovieSelected!

  #delete selected movie by id
  deleteMovie(_id: ID): MovieSelected!

  addUserDescription(_id: ID, userDescription: String): MovieSelected!

  createRecomendedMovies(
    title: String
    createdData: String
    description: String
    movies: [MovieSelectedInput]
  ): RecomendedMovies!

  deleteMovieListById(_id: ID!): RecomendedMovies!
  
  deleteAll: DeleteResponse!
  
  updateRecomendedList(args: RecomendedUpdateInput): RecomendedMovies!
}
